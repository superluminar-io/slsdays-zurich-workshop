Labs
Using AWS Lambda with Go
12 Apr 2019

superluminar.io

* Lab 0 - Form teams

.link https://tlk.io/slsdays-zurich

- Form teams of 2-3.
- For each lab write down key questions (max 2 per Team).
- Post them to the chat.
- We'll go through the questions after each lab.


* Lab 1 - Start out

.link https://github.com/superluminar-io/slsdays-zurich-workshop/blob/master/links.md

- clone https://github.com/superluminar-io/url-shortener
- Build and deploy the app
- Invoke the functions

* Lab 2 - A bit more advanced

- Create a function that:
1. listens to POST request
2. parses a name from the body and
3. responds with Hello $name

- Create some log messages
- Find out how to display log messages

* Lab 3 - URL Shortener

Implement a URL shortener using `DynamoDB` for storage with two functions.

- One function to create shortened URLs

 curl -v -XPOST -d url=https://zurich.serverlessdays.io https://$ENDPOINT/create-url

 > POST /create-url HTTP/1.1
 < HTTP/1.1 Created 201
 Created short url: http://$ENDPOINT/${short-url}

- One function to retrieve and redirect to the shortened URL

 curl -v http://$ENDPOINT/${short-url}

 > GET /${short-url} HTTP/1.1
 < HTTP/1.1 302 Found
 < Location: https://zurich.serverlessdays.io

* Things you'll need

- Use the `aws-sdk-go` package to talk to DynamoDB
- Create a DynamoDB table using CloudFormation
- Give your Lambda functions permissions to access the DynamoDB table with IAM
- Inject the DynamoDB table via environment variables
- Use path parameters with API Gateway and Lambda

* Using DynamoDB via the aws-sdk-go
 import (
 	"github.com/aws/aws-sdk-go/aws"
 	"github.com/aws/aws-sdk-go/aws/session"
 	"github.com/aws/aws-sdk-go/service/dynamodb"
 )
.code ./slsdays-zurich/create-url/main.go 48,61

* Creating a DynamoDB table with Cloudformation

`serverless.yml` supports arbitrary Cloudformation resources under the `resources` key.

 resources:
   Resources:
     DynamoDBTable:
       Type: AWS::Serverless::SimpleTable
       Properties:
         PrimaryKey:
           Name: id
           Type: String
         ProvisionedThroughput:
           ReadCapacityUnits: 5
           WriteCapacityUnits: 5

* Give your Lambda functions permissions to access DynamoDB
- Every AWS Lambda function needs permission to interact with other AWS infrastructure resources
- Permissions are set via an AWS IAM Role which is automatically created and is shared by all of your functions
- You can set additional permissions via the `serverless.yml` file

 #TODO
 https://github.com/awslabs/serverless-application-model/blob/master/docs/policy_templates.rst#policy-templates

* Inject the DynamoDB table via environment variables

 provider:
   environment:
     DYNAMO_DB_TABLE:
       Ref: DynamoDBTable # References resource by name

 resources:
   Resources:
     DynamoDBTable:
       Type: AWS::DynamoDB::Table

* Configure path parameters for your function

 get-url:
   handler: bin/get-url
   events:
     - http:
         path: /{short_url}
         method: get
         request:
           parameters:
             paths:
               short_url: true

* Lab 4 - DynamoDB Streams

- Create a new function
- Create a new table
- Hook up the new function to the DynamoDB stream of the url-shortener table
- Fetch preview using e.g. https://github.com/badoux/goscraper
- Save the preview to the new *preview* table

Hint:

- Add "`Properties.StreamSpecification.StreamViewType:` `NEW_IMAGE`" to the *url-shortener* *table*