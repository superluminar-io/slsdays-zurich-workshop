ServerlessDays Zürich 2019
Using AWS Lambda with Go
12 Apr 2019

superluminar.io

* Prequisites

- Go installation
- Python installation
- Working AWS credentials
- dep

* Install SAM CLI

via Homebrew

 $ brew tap aws/tap
 $ brew install aws-sam-cli

via python pip

 $ pip install --user aws-sam-cli

.link https://aws.amazon.com/serverless/sam/#Install_SAM_CLI

* Our first application

 $ cd $GOPATH/src
 $ sam init --runtime go1.x --name slsdays-zurich
 [+] Initializing project structure...

 Project generated: ./slsdays-zurich

 Steps you can take next within the project folder
 ===================================================
 [*] Install dependencies
 [*] Invoke Function: sam local invoke HelloWorldFunction --event event.json
 [*] Start API Gateway locally: sam local start-api

 Read slsdays-zurich/README.md for further instructions

 [*] Project initialization is now complete

* Our first application

 $ tree
   .
   ├── Makefile
   ├── README.md
   ├── hello-world
   │   ├── main.go
   │   └── main_test.go
   └── template.yaml

* Build it!

 $ make build
 GOOS=linux GOARCH=amd64 go build -o hello-world/hello-world ./hello-world

* AWS Setup

Configure your aws cli

 $ aws configure --profile=slsdays-zurich

Create a S3 bucket for deployment

 $ aws s3 mb s3://slsdays-zurich

* Deploy it!

.code assets/deploy.txt

* Curl it!

Get the API endpoint

 $ aws cloudformation describe-stacks \
    --profile slsdays-zurich \
    --stack-name slsdays-zurich \
    --query 'Stacks[].Outputs'

 $ curl https://sbu69ucglj.execute-api.eu-central-1.amazonaws.com/Prod/hello/
   Hello, 19.145.25.181

* How does it work?
You configure a SAM project using `template.yaml`.

.code ./slsdays-zurich/template.yaml 1,14

* How does it work?

.code ./slsdays-zurich/template.yaml 31,

* What are functions?
- Functions have a name
- Functions have a handler - the executable
- Functions are triggered by events - e.g. the HTTP request

.code ./slsdays-zurich/template.yaml 13,29

* Where is the code?

- We reference the path to the source code
- We specify our handler function

.code ./slsdays-zurich/template.yaml 16,18

* What does it look like?

.code ./slsdays-zurich/hello-world/main.go /handler/,47

* What does it look like?

.code ./slsdays-zurich/hello-world/main.go /handler/3,12
.code ./slsdays-zurich/hello-world/main.go /handler/49,

* Invoking a function directly

 $ sam local invoke --no-event
   2019-04-04 12:06:21 Found credentials in environment variables.
   2019-04-04 12:06:21 Invoking hello-world (go1.x)

   Fetching lambci/lambda:go1.x Docker container image...
   START RequestId: 6d6fcd7c-a579-1791-0903-b2db39d3e888 Version: $LATEST
   END RequestId: 6d6fcd7c-a579-1791-0903-b2db39d3e888
   REPORT RequestId: 6d6fcd7c-a579-1791-0903-b2db39d3e888	Duration: 576.49 ms	Billed Duration: 600 ms	Memory Size: 128 MB	Max Memory Used: 12 MB
   {"statusCode":200,"headers":null,"multiValueHeaders":null,"body":"Hello, 73.218.42.148\n"}

* Where are our logs?

- Logs are aggregated via `Cloudwatch Logs`
- Each Lambda function logs into its own `LogGroup`
- Anything you write on `STDOUT` shows up in the logs

 $ sam logs \
     --profile slsdays-zurich \
     --name HelloWorldFunction \
     --stack-name slsdays-zurich
 2019/04/04/[$LATEST]48ae6fd739124bf98c155955c8d3cf00 2019-04-04T11:35:19.938000 START RequestId: 9dcccd75-45b2-42b7-8a90-2da3f04ae0a5 Version: $LATEST
 2019/04/04/[$LATEST]48ae6fd739124bf98c155955c8d3cf00 2019-04-04T11:35:21.053000 END RequestId: 9dcccd75-45b2-42b7-8a90-2da3f04ae0a5
 2019/04/04/[$LATEST]48ae6fd739124bf98c155955c8d3cf00 2019-04-04T11:35:21.072000 REPORT RequestId: 9dcccd75-45b2-42b7-8a90-2da3f04ae0a5	Duration: 1115.01 ms	Billed Duration: 1200 ms 	Memory Size: 128 MB	Max Memory Used: 46 MB

* An example

.code ./slsdays-zurich/logging/main.go 12,16

 $ sam logs \
      --profile slsdays-zurich \
      --name HelloWorldFunction \
      --stack-name slsdays-zurich
 [...] START RequestId: 84c360fc-2c6a-4d72-86e6-d6913ffefd10 Version: $LATEST
 [...] time="2018-04-04T11:59:24Z" level=info msg="oops, one year ago."
 [...] Just some text to STDOUT
 [...] E0404 11:59:24.152390       6 main.go:48] kubelet config controller: ARRRRGGGGGGG!!!!
 [...] END RequestId: 84c360fc-2c6a-4d72-86e6-d6913ffefd10
 [...] REPORT RequestId: 84c360fc-2c6a-4d72-86e6-d6913ffefd10	Duration: 89.18 ms	Billed Duration: 100 ms 	Memory Size: 128 MB	Max Memory Used: 50 MB

* Where can I find metrics?
- Metrics are collected in `CloudWatch`
- Metrics recorded are `Invocations`, `Errors`, `Duration` etc.
- You access these via the AWS console
.image ./images/cloudwatch.png 300 _
.link https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-metrics.html

* The underlying architecture
.image ./images/simple-web-service.png
.caption _Image_ by [[https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/][Jeremy Daly]]

.link https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/

* API Gateway

- Unified endpoint
- Multiple backends (Lambda, EC2, self-hosted)
- Throttling
- Caching
- Schema transformation (XML->JSON etc.)
- Authentication
- Cognito user pools

* Lambda

- Function as a service
- Event driven
- Pay per execution time per 100 ms
- Max execution time: 15 minutes
- Multiple languages (Go, Python, Java, NodeJS)
- Layers (like a Docker image)
- Custom run times
- Scale memory/CPU
- BEWARE: cold starts

* DynamoDB

- NoSQL database
- schemaless
- Streams
- Indices
- Backup
- Transactions

* SAM and Cloudformation

- SAM is an extension of CloudFormation
- can use all CloudFormation keywords / elements
- create CloudFormation Stack in the background

* The Cloudformation stack

.image ./images/cf-stack.png _ 920